#include "DSelector_selector.h"

void DSelector_selector::Init(TTree *locTree)
{
	// USERS: IN THIS FUNCTION, ONLY MODIFY SECTIONS WITH A "USER" OR "EXAMPLE" LABEL. LEAVE THE REST ALONE.

	// The Init() function is called when the selector needs to initialize a new tree or chain.
	// Typically here the branch addresses and branch pointers of the tree will be set.
	// Init() will be called many times when running on PROOF (once per file to be processed).

	//USERS: SET OUTPUT FILE NAME //can be overriden by user in PROOF
	dOutputFileName = "test_histogram_da.root"; //"" for none
	dOutputTreeFileName = "test_entries_da.root"; //"" for none
	dFlatTreeFileName = ""; //output flat tree (one combo per tree entry), "" for none
	dFlatTreeName = ""; //if blank, default name will be chosen

	//Because this function gets called for each TTree in the TChain, we must be careful:
		//We need to re-initialize the tree interface & branch wrappers, but don't want to recreate histograms
	bool locInitializedPriorFlag = dInitializedFlag; //save whether have been initialized previously
	DSelector::Init(locTree); //This must be called to initialize wrappers for each new TTree
	//gDirectory now points to the output file with name dOutputFileName (if any)
	if(locInitializedPriorFlag)
		return; //have already created histograms, etc. below: exit

	Get_ComboWrappers();
	dPreviousRunNumber = 0;

	/*********************************** EXAMPLE USER INITIALIZATION: ANALYSIS ACTIONS **********************************/

	//ANALYSIS ACTIONS: //Executed in order if added to dAnalysisActions
	//false/true below: use measured/kinfit data

	//PID
	dAnalysisActions.push_back(new DHistogramAction_ParticleID(dComboWrapper, false));
	//below: value: +/- N ns, Unknown: All PIDs, SYS_NULL: all timing systems
	//dAnalysisActions.push_back(new DCutAction_PIDDeltaT(dComboWrapper, false, 0.5, KPlus, SYS_BCAL));

	//MASSES
	//dAnalysisActions.push_back(new DHistogramAction_InvariantMass(dComboWrapper, false, Lambda, 1000, 1.0, 1.2, "Lambda"));
	//dAnalysisActions.push_back(new DHistogramAction_MissingMassSquared(dComboWrapper, false, 1000, -0.1, 0.1));

	//KINFIT RESULTS
	dAnalysisActions.push_back(new DHistogramAction_KinFitResults(dComboWrapper));

	//CUT MISSING MASS
	//dAnalysisActions.push_back(new DCutAction_MissingMassSquared(dComboWrapper, false, -0.03, 0.02));

	//BEAM ENERGY
	dAnalysisActions.push_back(new DHistogramAction_BeamEnergy(dComboWrapper, false));
	//dAnalysisActions.push_back(new DCutAction_BeamEnergy(dComboWrapper, false, 8.4, 9.05));

	//KINEMATICS
	dAnalysisActions.push_back(new DHistogramAction_ParticleComboKinematics(dComboWrapper, false));

	//INITIALIZE ACTIONS
	//If you create any actions that you want to run manually (i.e. don't add to dAnalysisActions), be sure to initialize them here as well
	Initialize_Actions();

	/******************************** EXAMPLE USER INITIALIZATION: STAND-ALONE HISTOGRAMS *******************************/

	//EXAMPLE MANUAL HISTOGRAMS:
	dHist_MissingMassSquared = new TH1I("MissingMassSquared", ";Missing Mass Squared (GeV/c^{2})^{2}", 600, -0.06, 0.06);
	dHist_BeamEnergy = new TH1I("BeamEnergy", ";Beam Energy (GeV)", 600, 0.0, 12.0);

    //Invariant Mass
    h_m_pi0 = new TH1F("h_m_pi0","",70,0.1,0.17);
    h_m_omega = new TH1F("h_m_omega","",180,0.7,0.88);
    // histogram for kinematic fit
    h_KinFitChiSq = new TH1F("KinFitChiSq", ";Kinematic Fit #chi^{2}/NDF", 200, 0., 20.);
    h_KinFitChiSq_best = new TH1F("KinFitChiSq_best", ";Kinematic Fit #chi^{2}/NDF", 200, 0., 20.);
    h_KinFitCL = new TH1F("KinFitCL", ";Kinematic Fit Confidence Level", 100, 0., 1.);

    //Kinematic fit vertex
    h_KinVertex_z_pre = new TH1F("z_vertex_pre", "z before preselection; z cm; Events/(0.1 cm)", 500, 40.0, 90.0);
    h_KinVertex_z_aft = new TH1F("z_vertex_aft", "z after preselection; z cm; Counts/(0.2 cm)", 400, 20.0, 100.0);
    h_KinVertex_r_pre = new TH2F("r_vertex_pre", "r before preselection", 60,-1.5,1.5,60,-1.5,1.5);
    h_KinVertex_r_aft = new TH2F("r_vertex_aft", "r after preselection", 60,-1.5,1.5,60,-1.5,1.5);

    //FCAL & BCAL neutral shower position 
    h_r_FCAL = new TH2F("r_FCAL","r_FCAL",240,-120,120,240,-120,120);
    h_z_BCAL = new TH1F("z_BCAL","z_BCAL",220,180,400);

    //theta
    h_the_proton = new TH1F("h_the_proton","",40,40,80);
    h_the_pip = new TH1F("h_the_pip","",10,0,10);
    h_the_pim = new TH1F("h_the_pim","",10,0,10);

    // Beam/RF
    h_beamdeltaT = new TH1F("h_beamdeltaT","",500,-25,25);
    // Missing
        h_MissingMassSquared = new TH1F("h_MissingMassSquared", "", 200, -0.02, 0.02);
        h_MissingE = new TH1F("h_MissingE","Missing Energy (GeV)",150 ,-1.5,1.5);
        h_MissingTM = new TH1F("missing transverse momentum","missing transverse momentum",150,0,0.15);

        h_PBE = new TH1F("h_PBE", "", 600, 0.0, 12.0);
        h_Ncombo_pre = new TH1F("h_Ncombo_pre","",20,0,20);
        h_Ncombo_aft = new TH1F("h_Ncombo_aft","",20,0,20);
    //costheta and Energy for prhoton
    h_costhe_gam = new TH1F("h_costhe_gam","",20,0,1.1);
    h_Egam = new TH1F("h_Egam","",14,0,0.7);
    
	/************************** EXAMPLE USER INITIALIZATION: CUSTOM OUTPUT BRANCHES - MAIN TREE *************************/

	//EXAMPLE MAIN TREE CUSTOM BRANCHES (OUTPUT ROOT FILE NAME MUST FIRST BE GIVEN!!!! (ABOVE: TOP)):
	//The type for the branch must be included in the brackets
	//1st function argument is the name of the branch
	//2nd function argument is the name of the branch that contains the size of the array (for fundamentals only)
        dTreeInterface->Create_Branch_Fundamental<Int_t>("my_int"); //fundamental = char, int, float, double, etc.
        //dTreeInterface->Create_Branch_FundamentalArray<Int_t>("my_int_array", "my_int");
        dTreeInterface->Create_Branch_FundamentalArray<Double_t>("Pgamma1", "my_int");
        dTreeInterface->Create_Branch_FundamentalArray<Double_t>("Pgamma2", "my_int");
        dTreeInterface->Create_Branch_Fundamental<Double_t>("Egamma1_BCAL") ;
        dTreeInterface->Create_Branch_Fundamental<Double_t>("Egamma1_FCAL") ;
        dTreeInterface->Create_Branch_Fundamental<Double_t>("Egamma2_BCAL") ;
        dTreeInterface->Create_Branch_Fundamental<Double_t>("Egamma2_FCAL") ;

	/*
	dTreeInterface->Create_Branch_Fundamental<Int_t>("my_int"); //fundamental = char, int, float, double, etc.
	dTreeInterface->Create_Branch_FundamentalArray<Int_t>("my_int_array", "my_int");
	dTreeInterface->Create_Branch_FundamentalArray<Float_t>("my_combo_array", "NumCombos");
	dTreeInterface->Create_Branch_NoSplitTObject<TLorentzVector>("my_p4");
	dTreeInterface->Create_Branch_ClonesArray<TLorentzVector>("my_p4_array");
	*/

	/************************** EXAMPLE USER INITIALIZATION: CUSTOM OUTPUT BRANCHES - FLAT TREE *************************/

	//EXAMPLE FLAT TREE CUSTOM BRANCHES (OUTPUT ROOT FILE NAME MUST FIRST BE GIVEN!!!! (ABOVE: TOP)):
	//The type for the branch must be included in the brackets
	//1st function argument is the name of the branch
	//2nd function argument is the name of the branch that contains the size of the array (for fundamentals only)
	/*
	dFlatTreeInterface->Create_Branch_Fundamental<Int_t>("flat_my_int"); //fundamental = char, int, float, double, etc.
	dFlatTreeInterface->Create_Branch_FundamentalArray<Int_t>("flat_my_int_array", "flat_my_int");
	dFlatTreeInterface->Create_Branch_NoSplitTObject<TLorentzVector>("flat_my_p4");
	dFlatTreeInterface->Create_Branch_ClonesArray<TLorentzVector>("flat_my_p4_array");
	*/

	/************************************* ADVANCED EXAMPLE: CHOOSE BRANCHES TO READ ************************************/

	//TO SAVE PROCESSING TIME
		//If you know you don't need all of the branches/data, but just a subset of it, you can speed things up
		//By default, for each event, the data is retrieved for all branches
		//If you know you only need data for some branches, you can skip grabbing data from the branches you don't need
		//Do this by doing something similar to the commented code below

	//dTreeInterface->Clear_GetEntryBranches(); //now get none
	//dTreeInterface->Register_GetEntryBranch("Proton__P4"); //manually set the branches you want
}

Bool_t DSelector_selector::Process(Long64_t locEntry)
{
	// The Process() function is called for each entry in the tree. The entry argument
	// specifies which entry in the currently loaded tree is to be processed.
	//
	// This function should contain the "body" of the analysis. It can contain
	// simple or elaborate selection criteria, run algorithms on the data
	// of the event and typically fill histograms.
	//
	// The processing can be stopped by calling Abort().
	// Use fStatus to set the return value of TTree::Process().
	// The return value is currently not used.

	//CALL THIS FIRST
	DSelector::Process(locEntry); //Gets the data from the tree for the entry
	//cout << "RUN " << Get_RunNumber() << ", EVENT " << Get_EventNumber() << endl;
	//TLorentzVector locProductionX4 = Get_X4_Production();

	/******************************************** GET POLARIZATION ORIENTATION ******************************************/

	//Only if the run number changes
	//RCDB environment must be setup in order for this to work! (Will return false otherwise)
	UInt_t locRunNumber = Get_RunNumber();
	if(locRunNumber != dPreviousRunNumber)
	{
		dIsPolarizedFlag = dAnalysisUtilities.Get_IsPolarizedBeam(locRunNumber, dIsPARAFlag);
		dPreviousRunNumber = locRunNumber;
	}

	/********************************************* SETUP UNIQUENESS TRACKING ********************************************/

	//ANALYSIS ACTIONS: Reset uniqueness tracking for each action
	//For any actions that you are executing manually, be sure to call Reset_NewEvent() on them here
	Reset_Actions_NewEvent();

	//PREVENT-DOUBLE COUNTING WHEN HISTOGRAMMING
		//Sometimes, some content is the exact same between one combo and the next
			//e.g. maybe two combos have different beam particles, but the same data for the final-state
		//When histogramming, you don't want to double-count when this happens: artificially inflates your signal (or background)
		//So, for each quantity you histogram, keep track of what particles you used (for a given combo)
		//Then for each combo, just compare to what you used before, and make sure it's unique

	//EXAMPLE 1: Particle-specific info:
	set<Int_t> locUsedSoFar_BeamEnergy; //Int_t: Unique ID for beam particles. set: easy to use, fast to search

	//EXAMPLE 2: Combo-specific info:
		//In general: Could have multiple particles with the same PID: Use a set of Int_t's
		//In general: Multiple PIDs, so multiple sets: Contain within a map
		//Multiple combos: Contain maps within a set (easier, faster to search)
	set<map<Particle_t, set<Int_t> > > locUsedSoFar_MissingMass;

	//INSERT USER ANALYSIS UNIQUENESS TRACKING HERE

	/**************************************** EXAMPLE: FILL CUSTOM OUTPUT BRANCHES **************************************/
        Int_t locMyInt = 4;
        dTreeInterface->Fill_Fundamental<Int_t>("my_int", locMyInt);
	/*
	Int_t locMyInt = 7;
	dTreeInterface->Fill_Fundamental<Int_t>("my_int", locMyInt);

	TLorentzVector locMyP4(4.0, 3.0, 2.0, 1.0);
	dTreeInterface->Fill_TObject<TLorentzVector>("my_p4", locMyP4);

	for(int loc_i = 0; loc_i < locMyInt; ++loc_i)
		dTreeInterface->Fill_Fundamental<Int_t>("my_int_array", 3*loc_i, loc_i); //2nd argument = value, 3rd = array index
	*/

	/************************************************* LOOP OVER COMBOS *************************************************/
       //Loop over combos to pick the minist chisq
        UInt_t best_i = -1;
        double chisq_0 = 9999.0;
        for(UInt_t loc_i = 0; loc_i < Get_NumCombos(); ++loc_i)
        {
                //Set branch array indices for combo and all combo particles
                dComboWrapper->Set_ComboIndex(loc_i);

                // Is used to indicate when combos have been cut
        //      if(dComboWrapper->Get_IsComboCut()) // Is false when tree originally created
        //              continue; // Combo has been cut previously
           double chisq = dComboWrapper->Get_ChiSq_KinFit("")/dComboWrapper->Get_NDF_KinFit("");
            if(chisq < chisq_0 ){
               chisq_0 = chisq;
               best_i = loc_i;
            }
        }
	//Loop over combos
        int Ncombo = 0, Ncombo_aft = 0;
        Ncombo = Get_NumCombos();
        h_Ncombo_pre->Fill(Ncombo);
        for(UInt_t loc_i = 0; loc_i < Get_NumCombos(); ++loc_i)
        {
                //Set branch array indices for combo and all combo particles
                dComboWrapper->Set_ComboIndex(loc_i);

                // Is used to indicate when combos have been cut
                if(dComboWrapper->Get_IsComboCut()) // Is false when tree originally created
                        continue; // Combo has been cut previously
                /********************************************** GET PARTICLE INDICES *********************************************/

                //Used for tracking uniqueness when filling histograms, and for determining unused particles

                //Step 0
                Int_t locBeamID = dComboBeamWrapper->Get_BeamID();
                Int_t locPiPlusTrackID = dPiPlusWrapper->Get_TrackID();
                Int_t locPiMinusTrackID = dPiMinusWrapper->Get_TrackID();
                Int_t locProtonTrackID = dProtonWrapper->Get_TrackID();

                //Step 1
                Int_t locPhoton1NeutralID = dPhoton1Wrapper->Get_NeutralID();
                Int_t locPhoton2NeutralID = dPhoton2Wrapper->Get_NeutralID();

                /*********************************************** GET FOUR-MOMENTUM **********************************************/

                // Get P4's: //is kinfit if kinfit performed, else is measured
                //dTargetP4 is target p4
                //Step 0
                TLorentzVector locBeamP4 = dComboBeamWrapper->Get_P4();
                TLorentzVector locPiPlusP4 = dPiPlusWrapper->Get_P4();
                TLorentzVector locPiMinusP4 = dPiMinusWrapper->Get_P4();
                TLorentzVector locProtonP4 = dProtonWrapper->Get_P4();
                //Step 1
                TLorentzVector locDecayingPi0P4 = dDecayingPi0Wrapper->Get_P4();
                TLorentzVector locPhoton1P4 = dPhoton1Wrapper->Get_P4();
                TLorentzVector locPhoton2P4 = dPhoton2Wrapper->Get_P4();


                double Ephoton1_BCAL = dPhoton1Wrapper->Get_Energy_BCAL();
                double Ephoton1_FCAL = dPhoton1Wrapper->Get_Energy_FCAL();
                dTreeInterface->Fill_Fundamental<Double_t>("Egamma1_BCAL",Ephoton1_BCAL);
                dTreeInterface->Fill_Fundamental<Double_t>("Egamma1_FCAL",Ephoton1_FCAL);

                double Ephoton2_BCAL = dPhoton2Wrapper->Get_Energy_BCAL();
                double Ephoton2_FCAL = dPhoton2Wrapper->Get_Energy_FCAL();
                dTreeInterface->Fill_Fundamental<Double_t>("Egamma2_BCAL",Ephoton2_BCAL);
                dTreeInterface->Fill_Fundamental<Double_t>("Egamma2_FCAL",Ephoton2_FCAL);

                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma1", locPhoton1P4.Px(), 0);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma1", locPhoton1P4.Py(), 1);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma1", locPhoton1P4.Pz(), 2);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma1", locPhoton1P4.E(), 3);

                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma2", locPhoton2P4.Px(), 0);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma2", locPhoton2P4.Py(), 1);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma2", locPhoton2P4.Pz(), 2);
                dTreeInterface->Fill_Fundamental<Double_t>("Pgamma2", locPhoton2P4.E(), 3);

                // Get Measured P4's:
                //Step 0
                TLorentzVector locBeamP4_Measured = dComboBeamWrapper->Get_P4_Measured();
                TLorentzVector locPiPlusP4_Measured = dPiPlusWrapper->Get_P4_Measured();
                TLorentzVector locPiMinusP4_Measured = dPiMinusWrapper->Get_P4_Measured();
                TLorentzVector locProtonP4_Measured = dProtonWrapper->Get_P4_Measured();
                //Step 1
                TLorentzVector locPhoton1P4_Measured = dPhoton1Wrapper->Get_P4_Measured();
                TLorentzVector locPhoton2P4_Measured = dPhoton2Wrapper->Get_P4_Measured();

        /***************************** GET FOUR-SPACE***************************************/
        TLorentzVector locBeamX4_Measured = dComboBeamWrapper->Get_X4_Measured();
        TLorentzVector locProtonX4_Measured = dProtonWrapper->Get_X4_Measured();
        TLorentzVector locProtonX4 = dProtonWrapper->Get_X4();
                /********************************************* COMBINE FOUR-MOMENTUM ********************************************/

                // DO YOUR STUFF HERE

                // Combine 4-vectors
                TLorentzVector locMissingP4_Measured = locBeamP4_Measured + dTargetP4;
                locMissingP4_Measured -= locPiPlusP4_Measured + locPiMinusP4_Measured + locProtonP4_Measured + locPhoton1P4_Measured + locPhoton2P4_Measured;

        TLorentzVector P_Missing = locMissingP4_Measured;
        TLorentzVector P_pi0_M = locPhoton1P4_Measured + locPhoton2P4_Measured;
        TLorentzVector P_pi0 = locPhoton1P4 + locPhoton2P4;
        TLorentzVector P_omega = locPiMinusP4 + locPiPlusP4 + P_pi0;

        //Missing Mass Squared
                double mmsq = P_Missing.M2();

        //Missing Energy
        double misE = P_Missing.E();

        //Missing transverse Momentum
        double misTM = P_Missing.Perp();

        //kinematic vertex information
        double kin_vz = 0.0;
        double kin_vr = 0.0;
        double kin_vx = 0.0;
        double kin_vy = 0.0;
        kin_vz = locProtonX4_Measured.Z();
        kin_vx = locProtonX4_Measured.X();
        kin_vy = locProtonX4_Measured.Y();
        kin_vr = locProtonX4_Measured.Perp();

//        // photon beam energy
        double be = locBeamP4_Measured.E();
//
//        // theta of proton
        double theta_proton = locProtonP4.Theta()*(180.0/TMath::Pi());

        // theta of pion
        double theta_pip = locPiPlusP4.Theta()*(180.0/TMath::Pi());
        double theta_pim = locPiMinusP4.Theta()*(180.0/TMath::Pi());

        double m_pi0 = P_pi0_M.M();
        double m_omega = P_omega.M();
        //double kinfitCL  = 0.05;
        double kinfitCL = dComboWrapper->Get_ConfidenceLevel_KinFit("");
        double chisq = dComboWrapper->Get_ChiSq_KinFit("")/dComboWrapper->Get_NDF_KinFit("");

        //Beam RF
        double tRF = 0.0, tbeam = 0.0;
        tRF = dComboWrapper->Get_RFTime_Measured();
        tbeam = locBeamX4_Measured.T();
        double beamdeltaT = tbeam-tRF;

        double Mpi0=0.135;
        double Ppi0 = sqrt(P_pi0.E()*P_pi0.E()-Mpi0*Mpi0);
        double costhe = fabs(locPhoton1P4.E()-locPhoton2P4.E())/Ppi0;

        double Egam_min;
        if(locPhoton1P4.E()<locPhoton2P4.E()) Egam_min = locPhoton1P4.E();
        else Egam_min = locPhoton2P4.E();

        //lable
        bool cutkinfitCL,cutmisE,cutmmsq,cutkin_vz,cutkin_vr,cutmpi0,cutmomega,cuttheta_proton,cuttheta_pi,cutmisTM,cutPBE;
        bool same_event, cutbeamdeltaT;
        cutPBE = (be<9.0 && be > 8.4) ? true : false;
        cutkinfitCL = (kinfitCL > 0.01) ? true : false;
        cutmisE = (misE<1.0&&misE>-1.0) ? true : false;
        cutmmsq = (mmsq<0.05&&mmsq>-0.05) ? true : false;
        cutmisTM = (misTM < 0.25) ? true : false;
        cutkin_vz = (kin_vz<77 && kin_vz>50 ) ? true : false;
        cutkin_vr = (kin_vr<1) ? true : false;
        cutmpi0 = (m_pi0<0.15&&m_pi0>0.12) ? true : false;
        cutmomega = (m_omega<0.81&&m_omega>0.76) ? true : false;
        cuttheta_proton = (theta_proton<78&&theta_proton>52) ? true : false;
        cuttheta_pi = (theta_pip>1&&theta_pim>1) ? true : false;
        cutbeamdeltaT = (fabs(beamdeltaT)<(0.5*4.008)) ? true : false;
        //CUT
        same_event = (loc_i == best_i) ? true : false;
        //if(!same_event) continue;
        if(cutPBE && cutmisE && cutmisTM &&  cutmmsq && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) {h_KinFitChiSq->Fill(chisq);h_KinFitCL->Fill(kinfitCL);h_KinFitChiSq_best->Fill(chisq_0);}
        if(cutPBE && cutkinfitCL && cutmmsq && cutmisTM && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) h_MissingE->Fill(misE);
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) h_MissingMassSquared->Fill(mmsq);
        if(cutPBE && cutkinfitCL && cutmisE && cutmmsq && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) h_MissingTM->Fill(misTM);;
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vr && cutmpi0 && cutmomega) h_KinVertex_z_pre->Fill(kin_vz);
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutmpi0 && cutmomega) h_KinVertex_r_pre->Fill(kin_vx, kin_vy);
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmomega){
            h_m_pi0->Fill(m_pi0);}
        else {
            dComboWrapper->Set_IsComboCut(true);
        }
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmpi0) h_m_omega->Fill(m_omega);
        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) {h_the_proton->Fill(theta_proton); h_the_pip->Fill(theta_pip); h_the_pim->Fill(theta_pim);}
        if(cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) h_PBE->Fill(be);

        if(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmpi0 && cutmomega) {
           Ncombo_aft++;
           h_costhe_gam->Fill(costhe);
           h_Egam->Fill(Egam_min);
        }

        h_beamdeltaT->Fill(beamdeltaT);
                /******************************************** EXECUTE ANALYSIS ACTIONS *******************************************/
                // Loop through the analysis actions, executing them in order for the active particle combo
                if(!Execute_Actions()) //if the active combo fails a cut, IsComboCutFlag automatically set
                        continue;

                //if you manually execute any actions, and it fails a cut, be sure to call:

                /**************************************** EXAMPLE: FILL CUSTOM OUTPUT BRANCHES **************************************/

                /*
                TLorentzVector locMyComboP4(8.0, 7.0, 6.0, 5.0);
                //for arrays below: 2nd argument is value, 3rd is array index
                //NOTE: By filling here, AFTER the cuts above, some indices won't be updated (and will be whatever they were from the last event)
                        //So, when you draw the branch, be sure to cut on "IsComboCut" to avoid these.
                dTreeInterface->Fill_Fundamental<Float_t>("my_combo_array", -2*loc_i, loc_i);
                dTreeInterface->Fill_TObject<TLorentzVector>("my_p4_array", locMyComboP4, loc_i);
                */

                /**************************************** EXAMPLE: HISTOGRAM BEAM ENERGY *****************************************/

                //Histogram beam energy (if haven't already)
                if(locUsedSoFar_BeamEnergy.find(locBeamID) == locUsedSoFar_BeamEnergy.end())
                {
                        dHist_BeamEnergy->Fill(locBeamP4.E());
                        locUsedSoFar_BeamEnergy.insert(locBeamID);
                }

                /************************************ EXAMPLE: HISTOGRAM MISSING MASS SQUARED ************************************/

                //Missing Mass Squared
        //      double locMissingMassSquared = locMissingP4_Measured.M2();

                //Uniqueness tracking: Build the map of particles used for the missing mass
                        //For beam: Don't want to group with final-state photons. Instead use "Unknown" PID (not ideal, but it's easy).
                map<Particle_t, set<Int_t> > locUsedThisCombo_MissingMass;
                locUsedThisCombo_MissingMass[Unknown].insert(locBeamID); //beam
                locUsedThisCombo_MissingMass[PiPlus].insert(locPiPlusTrackID);
                locUsedThisCombo_MissingMass[PiMinus].insert(locPiMinusTrackID);
                locUsedThisCombo_MissingMass[Proton].insert(locProtonTrackID);
                locUsedThisCombo_MissingMass[Gamma].insert(locPhoton1NeutralID);
                locUsedThisCombo_MissingMass[Gamma].insert(locPhoton2NeutralID);

                //compare to what's been used so far
                if(locUsedSoFar_MissingMass.find(locUsedThisCombo_MissingMass) == locUsedSoFar_MissingMass.end())
                {
                        //unique missing mass combo: histogram it, and register this combo of particles
                        dHist_MissingMassSquared->Fill(mmsq);
                        locUsedSoFar_MissingMass.insert(locUsedThisCombo_MissingMass);
                }
                //E.g. Cut
        //      if((mmsq < -0.04) || (mmsq > 0.04))
        //      {
        //              dComboWrapper->Set_IsComboCut(true);
        //              continue;
        //      }
                //if(!(cutPBE && cutkinfitCL && cutmisE && cutmisTM && cutmmsq && cutkin_vz && cutkin_vr && cutmomega))
                //{ 
                //              dComboWrapper->Set_IsComboCut(true);
                //                continue;
                //}

                /****************************************** FILL FLAT TREE (IF DESIRED) ******************************************/

                //Int_t locMyInt_Flat = 4;
                //dFlatTreeInterface->Fill_Fundamental<Int_t>("flat_my_int", locMyInt_Flat);
                /*
                //FILL ANY CUSTOM BRANCHES FIRST!!

                TLorentzVector locMyP4_Flat(4.0, 3.0, 2.0, 1.0);
                dFlatTreeInterface->Fill_TObject<TLorentzVector>("flat_my_p4", locMyP4_Flat);
                for(int loc_j = 0; loc_j < locMyInt_Flat; ++loc_j)
                {
                        dFlatTreeInterface->Fill_Fundamental<Int_t>("flat_my_int_array", 3*loc_j, loc_j); //2nd argument = value, 3rd = array index
                        TLorentzVector locMyComboP4_Flat(8.0, 7.0, 6.0, 5.0);
                        dFlatTreeInterface->Fill_TObject<TLorentzVector>("flat_my_p4_array", locMyComboP4_Flat, loc_j);
                }
                */
                //FILL FLAT TREE
                //Fill_FlatTree();
                //if(dComboWrapper->Get_IsComboCut()) Fill_FlatTree(); //for the active combo
        } // end of combo loop

h_Ncombo_aft->Fill(Ncombo_aft);
	//FILL HISTOGRAMS: Num combos / events surviving actions
	Fill_NumCombosSurvivedHists();

	/******************************************* LOOP OVER THROWN DATA (OPTIONAL) ***************************************/
/*
	//Thrown beam: just use directly
	if(dThrownBeam != NULL)
		double locEnergy = dThrownBeam->Get_P4().E();

	//Loop over throwns
	for(UInt_t loc_i = 0; loc_i < Get_NumThrown(); ++loc_i)
	{
		//Set branch array indices corresponding to this particle
		dThrownWrapper->Set_ArrayIndex(loc_i);

		//Do stuff with the wrapper here ...
	}
*/
	/****************************************** LOOP OVER OTHER ARRAYS (OPTIONAL) ***************************************/
/*
	//Loop over beam particles (note, only those appearing in combos are present)
	for(UInt_t loc_i = 0; loc_i < Get_NumBeam(); ++loc_i)
	{
		//Set branch array indices corresponding to this particle
		dBeamWrapper->Set_ArrayIndex(loc_i);

		//Do stuff with the wrapper here ...
	}

	//Loop over charged track hypotheses
	for(UInt_t loc_i = 0; loc_i < Get_NumChargedHypos(); ++loc_i)
	{
		//Set branch array indices corresponding to this particle
		dChargedHypoWrapper->Set_ArrayIndex(loc_i);

		//Do stuff with the wrapper here ...
	}

	//Loop over neutral particle hypotheses
	for(UInt_t loc_i = 0; loc_i < Get_NumNeutralHypos(); ++loc_i)
	{
		//Set branch array indices corresponding to this particle
		dNeutralHypoWrapper->Set_ArrayIndex(loc_i);

		//Do stuff with the wrapper here ...
	}
*/

	/************************************ EXAMPLE: FILL CLONE OF TTREE HERE WITH CUTS APPLIED ************************************/

	Bool_t locIsEventCut = true;
	for(UInt_t loc_i = 0; loc_i < Get_NumCombos(); ++loc_i) {
		//Set branch array indices for combo and all combo particles
		dComboWrapper->Set_ComboIndex(loc_i);
		// Is used to indicate when combos have been cut
		if(dComboWrapper->Get_IsComboCut())
			continue;
		locIsEventCut = false; // At least one combo succeeded
		break;
	}
	if(!locIsEventCut && dOutputTreeFileName != "")
		Fill_OutputTree();


	return kTRUE;
}

void DSelector_selector::Finalize(void)
{
	//Save anything to output here that you do not want to be in the default DSelector output ROOT file.

	//Otherwise, don't do anything else (especially if you are using PROOF).
		//If you are using PROOF, this function is called on each thread,
		//so anything you do will not have the combined information from the various threads.
		//Besides, it is best-practice to do post-processing (e.g. fitting) separately, in case there is a problem.

	//DO YOUR STUFF HERE

	//CALL THIS LAST
	DSelector::Finalize(); //Saves results to the output file
}
